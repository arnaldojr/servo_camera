#!/usr/bin/env python

# Importa as bibliotecas do ROS e do Python
import rospy
from std_msgs.msg import String, Float32

import RPi.GPIO as GPIO
import time as time

# Seta o modo do  GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Seta o GPIO do servo motor
pinMotorAForwards = 19

# Seta a frequencia
Frequency = 50
# Seta o DutyCycle
DutyCycle = 8
DutyCycle2 =5
# Para o servo motor
Stop = 0

# Seta o pino do servo motor como saida
GPIO.setup(pinMotorAForwards, GPIO.OUT)

# Ajusta a frequencia do PWM
pwmMotor = GPIO.PWM(pinMotorAForwards, Frequency)

# Inicializa o PWM (servo parado)
pwmMotor.start(Stop)

# Funcao stop servo motor
def StopMotor():
    pwmMotor.ChangeDutyCycle(Stop)

# Funcao sobe camera
def SobeCamera():
    pwmMotor.ChangeDutyCycle(DutyCycle)

# Funcao desce camera
def DesceCamera():
    pwmMotor.ChangeDutyCycle(DutyCycle2)

# Funcao posicao
def PosCamera(command):
    pwmMotor.ChangeDutyCycle(command)

# Funcao Callback (le o comando recebido)
def CommandCallback(commandMessage):
    command = commandMessage.data
    if command == 'sobe':
        print('sobe Camera')
        SobeCamera()
        time.sleep(0.5)
        StopMotor()
        time.sleep(0.5)

    elif command == 'desce':
        print('Desce Camera')
        DesceCamera()
        time.sleep(0.5)
        StopMotor()
        time.sleep(0.5)

    elif command == 'stop':
        print('Parando')
        StopMotor()
    else:
        print('Posicao', command)
        PosCamera(command)
        time.sleep(0.5)
        StopMotor()
        time.sleep(0.5)

# Incia o node 
rospy.init_node('driver')

rospy.Subscriber('servo_camera/position', Float32, CommandCallback)
rospy.Subscriber('servo_camera/command', String, CommandCallback)

rospy.spin()
print('Shutting down: stopping motors')
StopMotor()
